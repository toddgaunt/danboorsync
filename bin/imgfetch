#!/usr/bin/env python3
# See LICENSE file for copyright and license details

import argparse
import sys
import os

from imgfetch import log
from imgfetch import util

from imgfetch import danbooru

lg = log.logger("imgfetch", 1)

def usage():
    sys.stderr.write("usage: imgfetch [-h] [-o <path>] [-v] [-q] SUBCMD\n")
    exit(-1)

def main():
    args = {}
    # Default arguments
    args['r'] = False
    args['o'] = '.'
    args['v'] = 0
    args['cmd'] = None

    # Parse arguments
    argi = 1
    while (argi < len(sys.argv)):
        if (('-' == sys.argv[argi][0]) and (2 == len(sys.argv[argi]))):
            switch = sys.argv[argi][1]
            if ('h' == switch):
                usage()
            elif ('v' == switch):
                for c in sys.argv[argi][1:]:
                    if ('v' != c):
                        usage()
                    args['v'] += 1
            elif ('q' == switch):
                for c in sys.argv[argi][1:]:
                    if ('q' != c):
                        usage()
                    args['v'] -= 1
            elif ('o' == switch):
                argi += 1
                try:
                    args['o'] = sys.argv[argi]
                except IndexError:
                    lg.error("No path given for -o switch.")
                    usage()
            else:
                lg.error("Invalid argument \"{}\".".format(sys.argv[argi]))
                usage()
        else:
            if ("danbooru" == sys.argv[argi].lower()):
                argi += 1
                args["cmd"] = danbooru.cmd
                break
            else:
                lg.error("Invalid subcommand \"{}\"".format(sys.argv[argi]));
                usage()
        argi += 1

    # A subcommand must be present
    if (None == args['cmd']):
        usage()

    # Utilize the arguments
    lg.level = args['v']

    if (not os.path.exists(args['o'])):
        try:
            os.mkdir(args['o'])
        except FileExistsError:
            lg.fatal("Could not create directory \"{}\".".format(args['o']))

    # Run whichever subcommand was run
    try:
        with util.cd(args['o']):
            args["cmd"](args, argi)
    except KeyboardInterrupt:
        exit(-1)

    lg.info("Finished.")

if __name__ == "__main__":
    main()
