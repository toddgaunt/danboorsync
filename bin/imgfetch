#!/usr/bin/env python3

# package imports
import argparse
import sys
import os

from imgfetch import danbooru
from imgfetch import logger
from imgfetch import util

def main():
    parser = argparse.ArgumentParser(description="downloads images en masse from the selected site")
    subparsers = parser.add_subparsers(help="subcommand to run.")

    parser.add_argument("-o", "--output", metavar="dir",
                        type=str, default="imgfetch_tmp",
                        help="specify a directory to create the download directory")

    parser.add_argument("-v", "--verbose",
                        action="count", default=1,
                        help="enable verbose output")

    parser.add_argument("-q", "--quiet",
                        action="store_true", default=False,
                        help="disable all output")

    parser.set_defaults(func=None)

    # Danbooru arguments
    parser_danbooru = subparsers.add_parser("danbooru", help="Download from a site with danbooru's api")

    parser_danbooru.add_argument('-p', '--pages', metavar='range',
                        type=str, default="1",
                        help='specify a page range to download from, \
                                e.g. -p 1-5,10,15-20')

    parser_danbooru.add_argument('url', metavar='url',
                    type=str,
                    help='url to download from')

    parser_danbooru.set_defaults(func=danbooru.cmd_danbooru)

    # Additional parsers go below here

    # Parse the args
    args = parser.parse_args(sys.argv[1:])

    # Run the top-level arguments
    if args.quiet:
        args.verbose = 0

    lg = logger.logger("imgfetch", args.verbose)

    if not os.path.exists(args.output):
        logger.info(lg, "Creating new directory: {}".format(args.output))
        try:
            os.mkdir(args.output)
        except FileExistsError:
            logger.error(lg, "Could not create directory: {}".format(args.output))
    else:
        logger.info(lg, "Using existing directory: {}".format(args.output))

    if args.func == None:
        parser.print_help()
        quit(1)

    # Run whichever subcommand was run
    with util.cd(args.output):
        args.func(args)

if __name__ == "__main__":
    main()
